// SUBMIT
public class BTree implements BTreeInterface {

	// ///////////////////BEGIN DO NOT CHANGE ///////////////////
	// ///////////////////BEGIN DO NOT CHANGE ///////////////////
	// ///////////////////BEGIN DO NOT CHANGE ///////////////////
	private BNode root;
	private final int t;

	/**
	 * Construct an empty tree.
	 */
	public BTree(int t) { //
		this.t = t;
		this.root = null;
	}

	// For testing purposes.
	public BTree(int t, BNode root) {
		this.t = t;
		this.root = root;
	}

	@Override
	public BNode getRoot() {
		return root;
	}

	@Override
	public int getT() {
		return t;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((root == null) ? 0 : root.hashCode());
		result = prime * result + t;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BTree other = (BTree) obj;
		if (root == null) {
			if (other.root != null)
				return false;
		} else if (!root.equals(other.root))
			return false;
		if (t != other.t)
			return false;
		return true;
	}

	// ///////////////////DO NOT CHANGE END///////////////////
	// ///////////////////DO NOT CHANGE END///////////////////
	// ///////////////////DO NOT CHANGE END///////////////////


	@Override
	public Block search(int key) {
		if (root!=null)
			return root.search(key);
		return null;
	}

	@Override
	public void insert(Block b) {
		//1
		if(root==null)
			root=new BNode(t, b);


		else{
			BNode r=root;
			//2 if r is full-split it
			if (r!=null&& r.isFull()){
				//3 Create a new node s and make it r's father
				BNode s=new BNode(t, false, 0);
				//4
				root=s;
				//6
				s.getChildrenList().add(r);
				//7 fix r by split
				s.splitChild(r, 1);

				//8
				r=s;
			}	

			//9 insert recursively to his children
			r.insertNonFull(b);
		}
	}

	@Override
	public void delete(int key) {
		if (root!=null){
			int numOfBlocks=root.getNumOfBlocks();
			if (numOfBlocks==1&&root.getBlockAt(0).getKey()==key&&root.getChildrenList().size()==0){
				root=null;}
			else{
				root.delete(key);
				if(root.getNumOfBlocks()==0&&root.getChildrenList().size()!=0)
					root=root.getChildAt(0);
			}

		}}



		@Override
		public MerkleBNode createMBT() {
			if (root==null)	return null;
			return root.createHashNode();
		}

	}
