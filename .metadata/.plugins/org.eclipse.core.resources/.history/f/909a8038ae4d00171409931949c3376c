// SUBMIT
public class BTree implements BTreeInterface {

	// ///////////////////BEGIN DO NOT CHANGE ///////////////////
	// ///////////////////BEGIN DO NOT CHANGE ///////////////////
	// ///////////////////BEGIN DO NOT CHANGE ///////////////////
	private BNode root;
	private final int t;

	/**
	 * Construct an empty tree.
	 */
	public BTree(int t) { //
		this.t = t;
		this.root = null;
	}

	// For testing purposes.
	public BTree(int t, BNode root) {
		this.t = t;
		this.root = root;
	}

	@Override
	public BNode getRoot() {
		return root;
	}

	@Override
	public int getT() {
		return t;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((root == null) ? 0 : root.hashCode());
		result = prime * result + t;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BTree other = (BTree) obj;
		if (root == null) {
			if (other.root != null)
				return false;
		} else if (!root.equals(other.root))
			return false;
		if (t != other.t)
			return false;
		return true;
	}

	// ///////////////////DO NOT CHANGE END///////////////////
	// ///////////////////DO NOT CHANGE END///////////////////
	// ///////////////////DO NOT CHANGE END///////////////////


	@Override
	public Block search(int key) {
		if (root!=null)
			return root.search(key);
		return null;
	}

	@Override
	public void insert(Block b) {
		//1
		if(root==null)
			root=new BNode(t, b);


		else{
			BNode r=root;
			//2 if r is full-split it
			if (r!=null&& r.isFull()){
				//3 Create a new node s and make it r's father
				BNode s=new BNode(t, false, 0);
				//4
				root=s;
				//6
				s.getChildrenList().add(r);
				//7 fix r by split
				s.splitChild(r, 1);

				//8
				r=s;
			}	

			//9 insert recursively to his children
			r.insertNonFull(b);
		}
	}

	@Override
	public void delete(int key) {
		if (root!=null){

			int numOfBlocks=root.getNumOfBlocks();	
			//if root has 1 block that we need to delete- we need to make a new root
			//1&&root.getBlockAt(0).getKey()==key
			if (numOfBlocks==1){

				if (!root.getChildrenList().isEmpty()){//in case root has children
					if(root.getChildAt(0).getNumOfBlocks()>=t)//take from left child
					{
						int i=root.getChildAt(0).getNumOfBlocks()-1;
						//BNode newRoot=new BNode(t, false, 1);
						//set block on root to be the preseccedor of key	
						root.getBlocksList().add(0, root.getChildAt(0).getBlockAt((i)));	
						//delete predecessor from children
						root.getChildAt(0).delete(root.getBlockKeyAt(0));
					}
					else
						if(root.getChildAt(1).getNumOfBlocks()>=t){//take from right child
							//BNode newRoot=new BNode(t, false, 1);
							//set block on root to be the seccesor of key	
							root.getBlocksList().add( root.getChildAt(1).getBlockAt((0)));	
							//delete seccesor from children
							root.getChildAt(1).delete(root.getBlockKeyAt(0));
						}
					//both childrens have min bloks-merge
						else{
							int i;
							BNode newRoot=new BNode(t, false, 2*t-1);
							for (i=0;i<root.getChildAt(0).getNumOfBlocks();i++){//add left children and blocks
								newRoot.getBlocksList().add(root.getChildAt(0).getBlockAt(i));
								newRoot.getChildrenList().add(root.getChildAt(i));}
							for (i=0;i<root.getChildAt(1).getNumOfBlocks();i++){//add left children and blocks
								newRoot.getBlocksList().add(root.getChildAt(1).getBlockAt(i));
								newRoot.getChildrenList().add(root.getChildAt(i));}
							root=newRoot;
						}

				}
				//else //root is leaf,  and has 1 block-the key
				//	root=null;

				/*
					BNode newRoot=new BNode(t, false, 2*t-1);
					int i;
					for (i=0;i<root.getChildAt(0).getNumOfBlocks();i++){//add left children and blocks
						newRoot.getBlocksList().add(root.getChildAt(0).getBlockAt(i));
						newRoot.getChildrenList().add(root.getChildAt(i));
					}
					//add block of root
					newRoot.getBlocksList().add(root.getBlockAt(0));
					//add right child of left child
					newRoot.getChildrenList().add(root.getChildAt(0).getChildAt(i));
					if (root.getChildrenList().get(1).isEmpty()){//root has 2 children
						for (i=0;i<root.getChildAt(1).getNumOfBlocks();i++){//ass right children and blocks
							newRoot.getBlocksList().add(root.getChildAt(1).getBlockAt(i));
							newRoot.getChildrenList().add(root.getChildAt(i));
						}
						newRoot.getChildrenList().add(root.getChildAt(1).getChildAt(i));
						//add right child of right child
					}
					root=newRoot;
					root.delete(key);
				 */
			}

			//else//root has 2 or more blocks //or doesn't contain key
			//	if(root.getNumOfBlocks()==1)
			//	{
					
			//	}
					root.delete(key);
			//
		}}



	@Override
	public MerkleBNode createMBT() {
		// TODO Auto-generated method stub
		return null;
	}


}
